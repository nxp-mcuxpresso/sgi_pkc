/*--------------------------------------------------------------------------*/
/* Copyright 2020-2025 NXP                                                  */
/*                                                                          */
/* NXP Proprietary. This software is owned or controlled by NXP and may     */
/* only be used strictly in accordance with the applicable license terms.   */
/* By expressly accepting such terms or by downloading, installing,         */
/* activating and/or otherwise using the software, you are agreeing that    */
/* you have read, and that you agree to comply with and are bound by, such  */
/* license terms. If you do not agree to be bound by the applicable license */
/* terms, then you may not retain, install, activate or otherwise use the   */
/* software.                                                                */
/*--------------------------------------------------------------------------*/

#ifndef MCUXCLSGI_SFR_CTRL_H_
#define MCUXCLSGI_SFR_CTRL_H_

#include <mcuxCsslFlowProtection.h>
#include <platform_specific_headers.h>
#include <internal/mcuxClSgi_SfrAccess.h>

#ifdef __cplusplus
extern "C" {
#endif


/* Number of registers KEY, DATIN, DATOUT*/
#define MCUXCLSGI_SFR_DATIN_CNT   SGI_DATIN_CNT
#define MCUXCLSGI_SFR_DATOUT_CNT  SGI_DATOUT_CNT
#define MCUXCLSGI_SFR_KEY_CNT                    SGI_KEY_CNT
#ifdef SGI_HAS_WRITEONLY_KEYS
#define MCUXCLSGI_SFR_KEY_WRITEONLY_START_INDEX  SGI_KEY_WRITEONLY_START
#endif /* SGI_HAS_WRITEONLY_KEYS */

/* Datout update handling */
#define MCUXCLSGI_SFR_CTRL_DATOUT_RES_END_UP     (0UL)
#define MCUXCLSGI_SFR_CTRL_DATOUT_RES_START_UP   (1UL)
#define MCUXCLSGI_SFR_CTRL_DATOUT_RES_TRIGGER_UP (2UL)
#define MCUXCLSGI_SFR_CTRL_DATOUT_RES_NO_UP      (3UL)

#define MCUXCLSGI_SFR_CTRL_END_UP     (MCUXCLSGI_SFR_CTRL_DATOUT_RES_END_UP     << MCUXCLSGI_SFR_BITPOS(CTRL,DATOUT_RES))
#define MCUXCLSGI_SFR_CTRL_START_UP   (MCUXCLSGI_SFR_CTRL_DATOUT_RES_START_UP   << MCUXCLSGI_SFR_BITPOS(CTRL,DATOUT_RES))
#define MCUXCLSGI_SFR_CTRL_TRIGGER_UP (MCUXCLSGI_SFR_CTRL_DATOUT_RES_TRIGGER_UP << MCUXCLSGI_SFR_BITPOS(CTRL,DATOUT_RES))
#define MCUXCLSGI_SFR_CTRL_NO_UP      (MCUXCLSGI_SFR_CTRL_DATOUT_RES_NO_UP      << MCUXCLSGI_SFR_BITPOS(CTRL,DATOUT_RES))

/* Crypto operation algorithm and key size selection */
#define MCUXCLSGI_SFR_CTRL_CRYPTO_OP_AES   (0U)
#define MCUXCLSGI_SFR_CTRL_CRYPTO_OP_DES   (1U)
#define MCUXCLSGI_SFR_CTRL_CRYPTO_OP_TDES  (2U)
#define MCUXCLSGI_SFR_CTRL_CRYPTO_OP_GFMUL (3U)
#define MCUXCLSGI_SFR_CTRL_CRYPTO_OP_SHA2  (4U)
#define MCUXCLSGI_SFR_CTRL_CRYPTO_OP_CMAC  (5U)

#define MCUXCLSGI_SFR_CTRL_AESKEYSZ_128 (0U)
#define MCUXCLSGI_SFR_CTRL_AESKEYSZ_192 (1U)
#define MCUXCLSGI_SFR_CTRL_AESKEYSZ_256 (2U)

#define MCUXCLSGI_SFR_CTRL_TDESKEY_2KEY (0U)
#define MCUXCLSGI_SFR_CTRL_TDESKEY_3KEY (1U)

#define MCUXCLSGI_SFR_CTRL_INVALID  ( 0xFFFFFFFFu ) // TODO: correctly define invalid value
#define MCUXCLSGI_SFR_CTRL_GFMUL    ( MCUXCLSGI_SFR_CTRL_CRYPTO_OP_GFMUL << MCUXCLSGI_SFR_BITPOS(CTRL,CRYPTO_OP))
#define MCUXCLSGI_SFR_CTRL_SHA2     ( MCUXCLSGI_SFR_CTRL_CRYPTO_OP_SHA2  << MCUXCLSGI_SFR_BITPOS(CTRL,CRYPTO_OP))
#define MCUXCLSGI_SFR_CTRL_CMAC     ( MCUXCLSGI_SFR_CTRL_CRYPTO_OP_CMAC  << MCUXCLSGI_SFR_BITPOS(CTRL,CRYPTO_OP))
#define MCUXCLSGI_SFR_CTRL_DES      ( MCUXCLSGI_SFR_CTRL_CRYPTO_OP_DES   << MCUXCLSGI_SFR_BITPOS(CTRL,CRYPTO_OP))
#define MCUXCLSGI_SFR_CTRL_TDES2KEY ((MCUXCLSGI_SFR_CTRL_CRYPTO_OP_TDES  << MCUXCLSGI_SFR_BITPOS(CTRL,CRYPTO_OP)) | (MCUXCLSGI_SFR_CTRL_TDESKEY_2KEY << MCUXCLSGI_SFR_BITPOS(CTRL,TDESKEY)))
#define MCUXCLSGI_SFR_CTRL_TDES3KEY ((MCUXCLSGI_SFR_CTRL_CRYPTO_OP_TDES  << MCUXCLSGI_SFR_BITPOS(CTRL,CRYPTO_OP)) | (MCUXCLSGI_SFR_CTRL_TDESKEY_3KEY << MCUXCLSGI_SFR_BITPOS(CTRL,TDESKEY)))
#define MCUXCLSGI_SFR_CTRL_AES128   ((MCUXCLSGI_SFR_CTRL_CRYPTO_OP_AES   << MCUXCLSGI_SFR_BITPOS(CTRL,CRYPTO_OP)) | (MCUXCLSGI_SFR_CTRL_AESKEYSZ_128 << MCUXCLSGI_SFR_BITPOS(CTRL,AESKEYSZ)))
#define MCUXCLSGI_SFR_CTRL_AES192   ((MCUXCLSGI_SFR_CTRL_CRYPTO_OP_AES   << MCUXCLSGI_SFR_BITPOS(CTRL,CRYPTO_OP)) | (MCUXCLSGI_SFR_CTRL_AESKEYSZ_192 << MCUXCLSGI_SFR_BITPOS(CTRL,AESKEYSZ)))
#define MCUXCLSGI_SFR_CTRL_AES256   ((MCUXCLSGI_SFR_CTRL_CRYPTO_OP_AES   << MCUXCLSGI_SFR_BITPOS(CTRL,CRYPTO_OP)) | (MCUXCLSGI_SFR_CTRL_AESKEYSZ_256 << MCUXCLSGI_SFR_BITPOS(CTRL,AESKEYSZ)))

/* Input selection and pre-processing handling */
#define MCUXCLSGI_SFR_CTRL_INSEL_DATIN0            (0UL << MCUXCLSGI_SFR_BITPOS(CTRL,INSEL))
#define MCUXCLSGI_SFR_CTRL_INSEL_DATIN1            (1UL << MCUXCLSGI_SFR_BITPOS(CTRL,INSEL))
#define MCUXCLSGI_SFR_CTRL_INSEL_DATIN2            (2UL << MCUXCLSGI_SFR_BITPOS(CTRL,INSEL))
#define MCUXCLSGI_SFR_CTRL_INSEL_DATIN3            (3UL << MCUXCLSGI_SFR_BITPOS(CTRL,INSEL))
#define MCUXCLSGI_SFR_CTRL_INSEL_DATIN0_XOR_DATOUT (4UL << MCUXCLSGI_SFR_BITPOS(CTRL,INSEL))
#define MCUXCLSGI_SFR_CTRL_INSEL_DATIN1_XOR_DATOUT (5UL << MCUXCLSGI_SFR_BITPOS(CTRL,INSEL))
#define MCUXCLSGI_SFR_CTRL_INSEL_DATIN2_XOR_DATOUT (6UL << MCUXCLSGI_SFR_BITPOS(CTRL,INSEL))
// TODO: guard
#define MCUXCLSGI_SFR_CTRL_INSEL_DATIN3_XOR_DATOUT (7UL << MCUXCLSGI_SFR_BITPOS(CTRL,INSEL))
#define MCUXCLSGI_SFR_CTRL_INSEL_DATOUT            (8UL << MCUXCLSGI_SFR_BITPOS(CTRL,INSEL))
#define MCUXCLSGI_SFR_CTRL_INSEL_INDEX(index)      ((index) << MCUXCLSGI_SFR_BITPOS(CTRL,INSEL))

#define MCUXCLSGI_SFR_CTRL_INSEL_NUMBER_TO_CTRL(datinNumber)               ((datinNumber) << MCUXCLSGI_SFR_BITPOS(CTRL,INSEL))       ///< Get the correct DATIN INSEL from the given datinNumber (0:MCUXCLSGI_SFR_CTRL_INSEL_DATIN0, 1:MCUXCLSGI_SFR_CTRL_INSEL_DATIN1,..)
#define MCUXCLSGI_SFR_CTRL_INSEL_XOR_DATOUT_NUMBER_TO_CTRL(datinNumber)    ((datinNumber + 4U) << MCUXCLSGI_SFR_BITPOS(CTRL,INSEL))  ///< Get the correct DATIN INSEL XOR_DATOUT CTRL from the given datinNumber (0:MCUXCLSGI_SFR_CTRL_INSEL_DATIN0_XOR_DATOUT, 1:MCUXCLSGI_SFR_CTRL_INSEL_DATIN1_XOR_DATOUT,..)

/* Output selection and post-processing handling */
#define MCUXCLSGI_SFR_CTRL_OUTSEL_RES               (0UL << MCUXCLSGI_SFR_BITPOS(CTRL,OUTSEL))
#define MCUXCLSGI_SFR_CTRL_OUTSEL_RES_XOR_DATIN0    (1UL << MCUXCLSGI_SFR_BITPOS(CTRL,OUTSEL))
#define MCUXCLSGI_SFR_CTRL_OUTSEL_RES_XOR_DATIN1    (2UL << MCUXCLSGI_SFR_BITPOS(CTRL,OUTSEL))
#define MCUXCLSGI_SFR_CTRL_OUTSEL_RES_XOR_DATIN2    (3UL << MCUXCLSGI_SFR_BITPOS(CTRL,OUTSEL))
#define MCUXCLSGI_SFR_CTRL_OUTSEL_RES_XOR_DATIN3    (4UL << MCUXCLSGI_SFR_BITPOS(CTRL,OUTSEL))
#define MCUXCLSGI_SFR_CTRL_OUTSEL_RES_INDEX(index)  ((index) << MCUXCLSGI_SFR_BITPOS(CTRL,OUTSEL))

/* Encryption/Decryption mode selection */
#define MCUXCLSGI_SFR_CTRL_ENC                   (0UL << MCUXCLSGI_SFR_BITPOS(CTRL,DECRYPT))
#define MCUXCLSGI_SFR_CTRL_DEC                   (1UL << MCUXCLSGI_SFR_BITPOS(CTRL,DECRYPT))
#define MCUXCLSGI_SFR_CTRL_ENC_DEC_MASK          (1UL << MCUXCLSGI_SFR_BITPOS(CTRL,DECRYPT))

/* Start operation trigger */
#define MCUXCLSGI_SFR_CTRL_START                 (1UL << MCUXCLSGI_SFR_BITPOS(CTRL,START))

#define MCUXCLSGI_SFR_CTRL_OUTSEL_MASK           (MCUXCLSGI_SFR_BITMSK(CTRL,OUTSEL))

#define MCUXCLSGI_SFR_CTRL_AES_EN               (1UL << MCUXCLSGI_SFR_BITPOS(CTRL,AES_EN))
#define MCUXCLSGI_SFR_CTRL_DES_EN               (1UL << MCUXCLSGI_SFR_BITPOS(CTRL,DES_EN))
#define MCUXCLSGI_SFR_CTRL_GCM_EN               (1UL << MCUXCLSGI_SFR_BITPOS(CTRL,GCM_EN))

/* Write mode options */
#define MCUXCLSGI_SFR_CTRL2_XORWR                (1UL << MCUXCLSGI_SFR_BITPOS(CTRL2,XORWR))

#define MCUXCLSGI_SFR_CTRL2_FLUSHWR              (1UL << MCUXCLSGI_SFR_BITPOS(CTRL2,FLUSHWR))
#define MCUXCLSGI_SFR_CTRL2_FLUSH                (1UL << MCUXCLSGI_SFR_BITPOS(CTRL2,FLUSH))
#define MCUXCLSGI_SFR_CTRL2_FLUSHKEY             (1UL << MCUXCLSGI_SFR_BITPOS(CTRL2,KEY_FLUSH))
#define MCUXCLSGI_SFR_CTRL2_FLUSHDATA            (1UL << MCUXCLSGI_SFR_BITPOS(CTRL2,DATIN_FLUSH))

#define MCUXCLSGI_SFR_CTRL2_INCR                 (1UL << MCUXCLSGI_SFR_BITPOS(CTRL2,INCR))
#define MCUXCLSGI_SFR_CTRL2_INCR_CIN             (1UL << MCUXCLSGI_SFR_BITPOS(CTRL2,INCR_CIN))
#define MCUXCLSGI_SFR_CTRL2_SMASKEN              (1UL << MCUXCLSGI_SFR_BITPOS(CTRL2,SMASKEN))
#define MCUXCLSGI_SFR_CTRL2_SMASKSTEP            (1UL << MCUXCLSGI_SFR_BITPOS(CTRL2,SMASKSTEP))
#define MCUXCLSGI_SFR_CTRL2_SMASKSW              (1UL << MCUXCLSGI_SFR_BITPOS(CTRL2,SMASKSW))
#define MCUXCLSGI_SFR_CTRL2_BYTES_ORDER          (1UL << MCUXCLSGI_SFR_BITPOS(CTRL2,BYTES_ORDER))

#define MCUXCLSGI_SFR_CTRL2_BYTES_ORDER_MASK     (MCUXCLSGI_SFR_BITMSK(CTRL2,BYTES_ORDER))
#define MCUXCLSGI_SFR_CTRL2_KEYRES_MASK          (MCUXCLSGI_SFR_BITMSK(CTRL2,KEYRES))

/* Dummy control */
#define MCUXCLSGI_SFR_DUMMY_CTRL_DDCTRL(dummy)   ((((uint32_t)dummy) << MCUXCLSGI_SFR_BITPOS(DUMMY_CTRL,DDCTRL)) & MCUXCLSGI_SFR_BITMSK(DUMMY_CTRL,DDCTRL))
#define MCUXCLSGI_SFR_DUMMY_CTRL_DDCTRL_MASK     (MCUXCLSGI_SFR_BITMSK(DUMMY_CTRL,DDCTRL))
#define MCUXCLSGI_SFR_DUMMY_CTRL_ADCTRL(dummy)   ((((uint32_t)dummy) << MCUXCLSGI_SFR_BITPOS(DUMMY_CTRL,ADCTRL)) & MCUXCLSGI_SFR_BITMSK(DUMMY_CTRL,ADCTRL))
#define MCUXCLSGI_SFR_DUMMY_CTRL_ADCTRL_POS      (MCUXCLSGI_SFR_BITPOS(DUMMY_CTRL,ADCTRL))
#define MCUXCLSGI_SFR_DUMMY_CTRL_ADCTRL_MASK     (MCUXCLSGI_SFR_BITMSK(DUMMY_CTRL,ADCTRL))

#define MCUXCLSGI_SFR_CTRL2_RKEY                 (1UL << MCUXCLSGI_SFR_BITPOS(CTRL2,RKEY))
#define MCUXCLSGI_SFR_CTRL2_KEYRES(index)        ((((uint32_t)index) << MCUXCLSGI_SFR_BITPOS(CTRL2,KEYRES)) & MCUXCLSGI_SFR_BITMSK(CTRL2,KEYRES))

/* Selection of fixed key */
#define MCUXCLSGI_SFR_CTRL_INKEYSEL_KEY0         (MCUXCLSGI_SFR_CTRL_INKEYSEL(MCUXCLSGI_SFR_KEY0_INDEX))
#define MCUXCLSGI_SFR_CTRL_INKEYSEL_KEY1         (MCUXCLSGI_SFR_CTRL_INKEYSEL(MCUXCLSGI_SFR_KEY1_INDEX))
#define MCUXCLSGI_SFR_CTRL_INKEYSEL_KEY2         (MCUXCLSGI_SFR_CTRL_INKEYSEL(MCUXCLSGI_SFR_KEY2_INDEX))
#define MCUXCLSGI_SFR_CTRL_INKEYSEL_KEY3         (MCUXCLSGI_SFR_CTRL_INKEYSEL(MCUXCLSGI_SFR_KEY3_INDEX))
#define MCUXCLSGI_SFR_CTRL_INKEYSEL_KEY4         (MCUXCLSGI_SFR_CTRL_INKEYSEL(MCUXCLSGI_SFR_KEY4_INDEX))
#define MCUXCLSGI_SFR_CTRL_INKEYSEL_KEY5         (MCUXCLSGI_SFR_CTRL_INKEYSEL(MCUXCLSGI_SFR_KEY5_INDEX))
#define MCUXCLSGI_SFR_CTRL_INKEYSEL_KEY6         (MCUXCLSGI_SFR_CTRL_INKEYSEL(MCUXCLSGI_SFR_KEY6_INDEX))
#define MCUXCLSGI_SFR_CTRL_INKEYSEL_KEY7         (MCUXCLSGI_SFR_CTRL_INKEYSEL(MCUXCLSGI_SFR_KEY7_INDEX))
#define MCUXCLSGI_SFR_CTRL_INKEYSEL(keyIndex)    ((((uint32_t)keyIndex) << MCUXCLSGI_SFR_BITPOS(CTRL,INKEYSEL)) & MCUXCLSGI_SFR_BITMSK(CTRL,INKEYSEL))

/* AES No decryption key schedule */
#define MCUXCLSGI_SFR_CTRL_AES_NO_KL             (1UL << MCUXCLSGI_SFR_BITPOS(CTRL,AES_NO_KL))

/* Right-shift to convert sizes in bytes to sizes in 32-bit words */
#define MCUXCLSGI_SFR_BYTES_TO_32BIT_WORD_SHIFT (2U)
#ifdef SGI_HAS_AES_AUTO_MODE
/* AUTO_MODE control */
#define MCUXCLSGI_SFR_AUTO_MODE_EN            ( 1UL << MCUXCLSGI_SFR_BITPOS(AUTO_MODE,AUTO_MODE_EN))
#define MCUXCLSGI_SFR_AUTO_MODE_STOP          ( 1UL << MCUXCLSGI_SFR_BITPOS(AUTO_MODE,AUTO_MODE_STOP))
#define MCUXCLSGI_SFR_AUTO_MODE_INCR_32_BIT   ( 0UL << MCUXCLSGI_SFR_BITPOS(AUTO_MODE,INCR_MODE))
#define MCUXCLSGI_SFR_AUTO_MODE_INCR_64_BIT   ( 1UL << MCUXCLSGI_SFR_BITPOS(AUTO_MODE,INCR_MODE))
#define MCUXCLSGI_SFR_AUTO_MODE_INCR_96_BIT   ( 2UL << MCUXCLSGI_SFR_BITPOS(AUTO_MODE,INCR_MODE))
#define MCUXCLSGI_SFR_AUTO_MODE_INCR_128_BIT  ( 3UL << MCUXCLSGI_SFR_BITPOS(AUTO_MODE,INCR_MODE))
#define MCUXCLSGI_SFR_AUTO_MODE_ECB           ( 0UL << MCUXCLSGI_SFR_BITPOS(AUTO_MODE,CMD))
#define MCUXCLSGI_SFR_AUTO_MODE_CTR           ( 1UL << MCUXCLSGI_SFR_BITPOS(AUTO_MODE,CMD))
#define MCUXCLSGI_SFR_AUTO_MODE_CBC           ( 2UL << MCUXCLSGI_SFR_BITPOS(AUTO_MODE,CMD))
#define MCUXCLSGI_SFR_AUTO_MODE_CMAC          ( 3UL << MCUXCLSGI_SFR_BITPOS(AUTO_MODE,CMD))
#ifdef SGI_HAS_KEY_WRAP_UNWRAP
#define MCUXCLSGI_SFR_AUTO_MODE_KEYWRAP_128   (16UL << MCUXCLSGI_SFR_BITPOS(AUTO_MODE,CMD))
#define MCUXCLSGI_SFR_AUTO_MODE_KEYWRAP_256   (17UL << MCUXCLSGI_SFR_BITPOS(AUTO_MODE,CMD))
#endif /* SGI_HAS_KEY_WRAP_UNWRAP */

/* AUTO_MODE DMA control */
#define MCUXCLSGI_SFR_AUTO_MODE_DMA_IFE_EN  (1UL << MCUXCLSGI_SFR_BITPOS(AUTO_DMA_CTRL,IFE))
#define MCUXCLSGI_SFR_AUTO_MODE_DMA_OFE_EN  (1UL << MCUXCLSGI_SFR_BITPOS(AUTO_DMA_CTRL,OFE))

#endif /* SGI_HAS_AES_AUTO_MODE */

/* SHA-2 control */
#define MCUXCLSGI_SFR_CTRL_SHA2_EN               (1UL << MCUXCLSGI_SFR_BITPOS(SHA2_CTRL,SHA2_EN))
#define MCUXCLSGI_SFR_CTRL_SHA2_MODE             (1UL << MCUXCLSGI_SFR_BITPOS(SHA2_CTRL,SHA2_MODE))
#define MCUXCLSGI_SFR_CTRL_SHA2_SIZE_224         (0UL << MCUXCLSGI_SFR_BITPOS(SHA2_CTRL,SHA2_SIZE))
#define MCUXCLSGI_SFR_CTRL_SHA2_SIZE_256         (1UL << MCUXCLSGI_SFR_BITPOS(SHA2_CTRL,SHA2_SIZE))
#define MCUXCLSGI_SFR_CTRL_SHA2_SIZE_384         (2UL << MCUXCLSGI_SFR_BITPOS(SHA2_CTRL,SHA2_SIZE))
#define MCUXCLSGI_SFR_CTRL_SHA2_SIZE_512         (3UL << MCUXCLSGI_SFR_BITPOS(SHA2_CTRL,SHA2_SIZE))
#define MCUXCLSGI_SFR_CTRL_SHA2_LOW_LIM          (0UL << MCUXCLSGI_SFR_BITPOS(SHA2_CTRL,SHA2_LOW_LIM))
#define MCUXCLSGI_SFR_CTRL_SHA2_HIGH_LIM_AUTO    (3UL << MCUXCLSGI_SFR_BITPOS(SHA2_CTRL,SHA2_HIGH_LIM))
#define MCUXCLSGI_SFR_CTRL_SHA2_HIGH_LIM_256     (1UL << MCUXCLSGI_SFR_BITPOS(SHA2_CTRL,SHA2_HIGH_LIM))
#define MCUXCLSGI_SFR_CTRL_SHA2_HIGH_LIM_512     (3UL << MCUXCLSGI_SFR_BITPOS(SHA2_CTRL,SHA2_HIGH_LIM))
#define MCUXCLSGI_SFR_CTRL_SHA2_HIGH_LIM_1024    (7UL << MCUXCLSGI_SFR_BITPOS(SHA2_CTRL,SHA2_HIGH_LIM))
#define MCUXCLSGI_SFR_CTRL_SHA2_COUNT_EN         (1UL << MCUXCLSGI_SFR_BITPOS(SHA2_CTRL,SHA2_COUNT_EN))
#define MCUXCLSGI_SFR_CTRL_SHA2_HASH_RELOAD      (1UL << MCUXCLSGI_SFR_BITPOS(SHA2_CTRL,HASH_RELOAD))
#define MCUXCLSGI_SFR_CTRL_SHA2_SHA2_STOP        (1UL << MCUXCLSGI_SFR_BITPOS(SHA2_CTRL,SHA2_STOP))
#define MCUXCLSGI_SFR_CTRL_SHA2_NO_AUTO_INIT     (1UL << MCUXCLSGI_SFR_BITPOS(SHA2_CTRL,NO_AUTO_INIT))

/* Key control */
#define MCUXCLSGI_SFR_KEY_CTRL_KEY_WO_KEY0A       (1UL << MCUXCLSGI_SFR_KEY0_INDEX)
#define MCUXCLSGI_SFR_KEY_CTRL_KEY_WO_KEY1A       (1UL << MCUXCLSGI_SFR_KEY1_INDEX)
#define MCUXCLSGI_SFR_KEY_CTRL_KEY_WO_KEY2A       (1UL << MCUXCLSGI_SFR_KEY2_INDEX)
#define MCUXCLSGI_SFR_KEY_CTRL_KEY_WO_KEY3A       (1UL << MCUXCLSGI_SFR_KEY3_INDEX)
#define MCUXCLSGI_SFR_KEY_CTRL_KEY_WO_KEY4A       (1UL << MCUXCLSGI_SFR_KEY4_INDEX)
#define MCUXCLSGI_SFR_KEY_CTRL_KEY_WO_KEY5A       (1UL << MCUXCLSGI_SFR_KEY5_INDEX)
#define MCUXCLSGI_SFR_KEY_CTRL_KEY_WO_KEY6A       (1UL << MCUXCLSGI_SFR_KEY6_INDEX)
#define MCUXCLSGI_SFR_KEY_CTRL_KEY_WO_KEY7A       (1UL << MCUXCLSGI_SFR_KEY7_INDEX)
#define MCUXCLSGI_SFR_KEY_CTRL_KEY_WO(keyIndex)   (1UL << (keyIndex))

/**
 * Read the SGI CTRL register
 */
MCUX_CSSL_FP_FUNCTION_DEF(mcuxClSgi_Sfr_readCtrl)
static inline uint32_t mcuxClSgi_Sfr_readCtrl(void)
{
  return MCUXCLSGI_SFR_READ(CTRL);
}

/**
 * Write the SGI CTRL register
 */
MCUX_CSSL_FP_FUNCTION_DEF(mcuxClSgi_Sfr_writeCtrl)
static inline void mcuxClSgi_Sfr_writeCtrl(uint32_t value)
{
  MCUXCLSGI_SFR_WRITE(CTRL, value);
}

/**
 * Read the SGI CTRL2 register
 */
MCUX_CSSL_FP_FUNCTION_DEF(mcuxClSgi_Sfr_readCtrl2)
static inline uint32_t mcuxClSgi_Sfr_readCtrl2(void)
{
  return MCUXCLSGI_SFR_READ(CTRL2);
}

/**
 * Write the SGI CTRL2 register
 */
MCUX_CSSL_FP_FUNCTION_DEF(mcuxClSgi_Sfr_writeCtrl2)
static inline void mcuxClSgi_Sfr_writeCtrl2(uint32_t value)
{
  MCUXCLSGI_SFR_WRITE(CTRL2, value);
}

/**
 * Read the SGI SHA2_CTRL register
 */
MCUX_CSSL_FP_FUNCTION_DEF(mcuxClSgi_Sfr_readSha2Ctrl)
static inline uint32_t mcuxClSgi_Sfr_readSha2Ctrl(void)
{
  return MCUXCLSGI_SFR_READ(SHA2_CTRL);
}

/**
 * Write the SGI SHA2_CTRL register
 */
MCUX_CSSL_FP_FUNCTION_DEF(mcuxClSgi_Sfr_writeSha2Ctrl)
static inline void mcuxClSgi_Sfr_writeSha2Ctrl(uint32_t value)
{
 MCUXCLSGI_SFR_WRITE(SHA2_CTRL, value);
}


MCUX_CSSL_FP_FUNCTION_DEF(mcuxClSgi_Sfr_readFifoWord)
static inline uint32_t mcuxClSgi_Sfr_readFifoWord(void)
{
  return MCUXCLSGI_SFR_READ(SHA_FIFO);
}

MCUX_CSSL_FP_FUNCTION_DEF(mcuxClSgi_Sfr_writeFifoWord)
static inline void mcuxClSgi_Sfr_writeFifoWord(uint32_t value)
{
  MCUXCLSGI_SFR_WRITE(SHA_FIFO, value);
}

#ifdef SGI_HAS_WRITEONLY_KEYS
/**
 * Check if a key index points to a write only key register.
 */
MCUX_CSSL_FP_FUNCTION_DEF(mcuxClSgi_Sfr_isWriteOnlyKey)
static inline bool mcuxClSgi_Sfr_isWriteOnlyKey(uint32_t keyIndex)
{
  /* TODO: run-time WR keys to be considered - current solution only does compile-time */
  return (keyIndex >= MCUXCLSGI_SFR_KEY_WRITEONLY_START_INDEX);
}
#endif /* SGI_HAS_WRITEONLY_KEYS */

#ifdef SGI_HAS_AES_AUTO_MODE
/**
 * Read the SGI AUTO_DMA_CTRL register
 */
MCUX_CSSL_FP_FUNCTION_DEF(mcuxClSgi_Sfr_readAutoDmaCtrl)
static inline uint32_t mcuxClSgi_Sfr_readAutoDmaCtrl(void)
{
  return MCUXCLSGI_SFR_READ(AUTO_DMA_CTRL);
}

/**
 * Write the SGI AUTO_DMA_CTRL register
 */
MCUX_CSSL_FP_FUNCTION_DEF(mcuxClSgi_Sfr_writeAutoDmaCtrl)
static inline void mcuxClSgi_Sfr_writeAutoDmaCtrl(uint32_t value)
{
  MCUXCLSGI_SFR_WRITE(AUTO_DMA_CTRL, value);
}

/**
 * Read the SGI AUTO_MODE register
 */
MCUX_CSSL_FP_FUNCTION_DEF(mcuxClSgi_Sfr_readAutoMode)
static inline uint32_t mcuxClSgi_Sfr_readAutoMode(void)
{
  return MCUXCLSGI_SFR_READ(AUTO_MODE);
}

/**
 * Write the SGI AUTO_MODE register
 */
MCUX_CSSL_FP_FUNCTION_DEF(mcuxClSgi_Sfr_writeAutoMode)
static inline void mcuxClSgi_Sfr_writeAutoMode(uint32_t value)
{
  MCUXCLSGI_SFR_WRITE(AUTO_MODE, value);
}
#endif /* SGI_HAS_AES_AUTO_MODE */

/**
 * Read the SGI KEY_CTRL register
 */
MCUX_CSSL_FP_FUNCTION_DEF(mcuxClSgi_Sfr_readKeyCtrl)
static inline uint32_t mcuxClSgi_Sfr_readKeyCtrl(void)
{
  return MCUXCLSGI_SFR_READ(KEY_CTRL);
}

/**
 * Write the SGI KEY_CTRL register
 */
MCUX_CSSL_FP_FUNCTION_DEF(mcuxClSgi_Sfr_writeKeyCtrl)
static inline void mcuxClSgi_Sfr_writeKeyCtrl(uint32_t value)
{
  MCUXCLSGI_SFR_WRITE(KEY_CTRL, value);
}



#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* MCUXCLSGI_SFR_CTRL_H_ */
